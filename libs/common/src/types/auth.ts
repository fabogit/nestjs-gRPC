// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v5.29.2
// source: proto/auth.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from '@nestjs/microservices';
import { Observable } from 'rxjs';

export const protobufPackage = 'auth';

/** Message definition for the CreateUser request DTO (Data Transfer Object). */
export interface CreateUserDto {
  username: string;
  password: string;
  age: number;
}

/** Message definition for a User. Represents the structure of a user object. */
export interface User {
  id: string;
  username: string;
  password: string;
  age: number;
  isSubscribed: boolean;
  /** Nested message containing social media links for the user. */
  socialMedia: SocialMedia | undefined;
}

/**
 * Message definition for Social Media links.
 * The 'optional' keyword means this field might not be set.
 */
export interface SocialMedia {
  /** Optional Twitter URI for the user. */
  twitterUri?: string | undefined;
  /** Optional Facebook URI for the user. */
  fbUri?: string | undefined;
}

/**
 * Empty message definition.
 * Used when no request or response body is needed for an RPC.
 */
export interface Empty {}

/**
 * Message definition for wrapping a list of User messages.
 * Useful for returning multiple users in a single response.
 */
export interface Users {
  /** Repeated field 'users' to hold a list of User messages. */
  users: User[];
}

/** Message definition for the FindOneUser request DTO. */
export interface FindOneUserDto {
  id: string;
}

/** Message definition for the UpdateUser request DTO. */
export interface UpdateUserDto {
  id: string;
  /** Nested message to update the user's social media information. */
  socialMedia: SocialMedia | undefined;
}

/** Message definition for Pagination request DTO. */
export interface PaginationDto {
  /** Page number for pagination. */
  page: number;
  /** Number of items to skip for pagination. */
  skip: number;
}

export const AUTH_PACKAGE_NAME = 'auth';

/**
 * Definition of the UsersService,
 * which outlines the available remote procedure calls for managing users.
 */

export interface UsersServiceClient {
  /** rpc for creating a new user. */

  createUser(request: CreateUserDto): Observable<User>;

  /**
   * rpc for retrieving all users. It takes an Empty message as input,
   * indicating no specific parameters are needed.
   */

  findAllUsers(request: Empty): Observable<Users>;

  /** rpc for retrieving a single user based on a provided identifier. */

  findOneUser(request: FindOneUserDto): Observable<User>;

  /** rpc for updating an existing user's information. */

  updateUser(request: UpdateUserDto): Observable<User>;

  /** rpc for removing a user based on their identifier. */

  removeUser(request: FindOneUserDto): Observable<User>;

  /**
   * rpc for querying users with pagination.
   * It takes a stream of PaginationDto as input and returns a stream of Users.
   */

  queryUsers(request: Observable<PaginationDto>): Observable<Users>;
}

/**
 * Definition of the UsersService,
 * which outlines the available remote procedure calls for managing users.
 */

export interface UsersServiceController {
  /** rpc for creating a new user. */

  createUser(request: CreateUserDto): Promise<User> | Observable<User> | User;

  /**
   * rpc for retrieving all users. It takes an Empty message as input,
   * indicating no specific parameters are needed.
   */

  findAllUsers(request: Empty): Promise<Users> | Observable<Users> | Users;

  /** rpc for retrieving a single user based on a provided identifier. */

  findOneUser(request: FindOneUserDto): Promise<User> | Observable<User> | User;

  /** rpc for updating an existing user's information. */

  updateUser(request: UpdateUserDto): Promise<User> | Observable<User> | User;

  /** rpc for removing a user based on their identifier. */

  removeUser(request: FindOneUserDto): Promise<User> | Observable<User> | User;

  /**
   * rpc for querying users with pagination.
   * It takes a stream of PaginationDto as input and returns a stream of Users.
   */

  queryUsers(request: Observable<PaginationDto>): Observable<Users>;
}

export function UsersServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      'createUser',
      'findAllUsers',
      'findOneUser',
      'updateUser',
      'removeUser',
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcMethod('UsersService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
    const grpcStreamMethods: string[] = ['queryUsers'];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcStreamMethod('UsersService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
  };
}

export const USERS_SERVICE_NAME = 'UsersService';
